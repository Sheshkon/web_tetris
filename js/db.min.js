let db,highscore=document.getElementById("highscore");async function init(){db=await idb.openDB("scoresDB",1,{upgrade(t){t.createObjectStore("scores",{keyPath:"score"})}}),list()}async function list(){let t=db.transaction("scores").objectStore("scores"),e=await t.getAll();if(e.length){let t="<table>\n        <thead>\n          <tr>\n            <th>place</th>\n            <th>score</th>\n            <th>lvl</th>\n            <th>lines</th>\n          </tr>\n         </thead>\n         <tbody>";e.reverse().forEach(((e,r)=>{t+=`<tr>\n        <td>${r+1}</td>\n        <td>${e.score}</td>\n        <td>${e.lvl}</td>\n        <td>${e.lines}</td>\n        </tr>`})),t+="</tbody></table>",highscore.innerHTML=t}else highscore.innerHTML="<li>no scores.</li>"}init();export async function clearScores(){let t=db.transaction("scores","readwrite");await t.objectStore("scores").clear(),await list()}export async function addScore(t,e,r){let n=db.transaction("scores","readwrite");try{await n.store.add({score:t,lvl:e,lines:r}),await list()}catch(t){if("ConstraintError"!=t.name)throw t}}